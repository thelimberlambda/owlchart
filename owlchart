#!/usr/bin/env python
# vi: ft=python

from config import config
from datetime import datetime, timedelta
from collections import defaultdict
import sqlite3 as sqlite
import matplotlib.pyplot as plt
import argparse


def fetch_owl_data(fromdate, todate):
    try:
        connection = sqlite.connect(config.db_path)
        result = connection.execute((
            'SELECT ' +
            'year, month, day, hour, min, ch1_kw_avg ' +
            'FROM energy_history ' +
            'WHERE printf("%04d%02d%02d", year, month, day) >= \'{:04d}{:02d}{:02d}\'' +
            'AND printf("%04d%02d%02d", year, month, day) < \'{:04d}{:02d}{:02d}\''
        ).format(
            fromdate.year,
            fromdate.month,
            fromdate.day,
            todate.year,
            todate.month,
            todate.day
        ))
        for (year, month, day, hour, min_, watt_minutes) in result:
            yield (datetime(year, month, day, hour, min_), watt_minutes)
    finally:
        if 'connection' in locals() and connection:
            connection.close()


def partition_into_days(data):
    parts = defaultdict(list)
    for r in data:
        date = r[0]
        parts[datetime(date.year, date.month, date.day)].append(r)
    return sorted(parts.items(), key=lambda i: i[0])


def main(fromdate, todate):
    data = partition_into_days(fetch_owl_data(fromdate, todate))
    data = list(item for item in data if item[0] >= datetime(2019, 12, 17))
    fig, axs = plt.subplots(len(data), 1, constrained_layout=True,
                            figsize=(8.3, 11.7))

    for ax, dayd in zip(axs, data):
        (xdata, kwatt) = zip(*dayd[1])
        the_day = dayd[0]
        the_next_day = dayd[0] + timedelta(days=1)
        total_kw = sum(kwatt) / 1000.0
        ax.set_title(the_day.strftime("%A %d %b %Y") +
                     " ({:.1f}kWh)".format(total_kw))
        ax.set_xlim([the_day, the_next_day])
        ax.set_ylim([0, 8000])
        ax.set_yticks([0, 2000, 4000, 6000, 8000])
        ax.plot(xdata, [kw*60 for kw in kwatt])
        for l in ax.get_xticklabels():
            l.set_rotation(40)
            l.set_horizontalalignment('right')

    plt.savefig('energy-{:%Y-%m-%d}-to-{:%Y-%m-%d}.svg'.format(
        fromdate,
        todate))


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "fromdate",
        help="The date from-which to generate the chart for a single week")
    parser.add_argument(
        "todate",
        help=("The date to-which to generate the chart for a single week " +
              "(non-inclusive)"))
    args = parser.parse_args()
    main(
        datetime.strptime(args.fromdate, '%Y-%m-%d'),
        datetime.strptime(args.todate, '%Y-%m-%d'))
